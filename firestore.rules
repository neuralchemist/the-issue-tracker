rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // functions
    function isSignedIn(){
      return request.auth != null
    }

    function userAsUser(){
      return request.auth.token.email == request.resource.data.email 
    }
    function userIsAuthor(){
      return resource.data.author_id == request.auth.uid
    }

    function userIsAssigned(){
      return resource.data.assigned_id == request.auth.uid
    }

    function userAsAuthor(){
      return request.resource.data.author_id == request.auth.uid

    }

    function notResolved(){
      return resource.data.resolved == false
    }

    function documentFieldsCheckout(requiredFields, optionalFields){
      let allFields = requiredFields.concat(optionalFields);
      let dataFields = request.resource.data.keys();
      return dataFields.hasAll(requiredFields) && dataFields.hasOnly(allFields);
    }

    function updateAllowedFields(allowedFields){
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields)
    }

    function createUserbyUser(){
      let requiredFields = [
        "email",
        "displayName",
      ];
      let optionalFields = [];

      return documentFieldsCheckout(requiredFields, optionalFields) && userAsUser();

    }
 
    function createIssueByAuthor() {
      let requiredFields = [
        "assigned_id",
        "assigned_to",
        "author",
        "author_id",
        "created_on",
        "description",
        "last_edited",
        "priority",
        "resolved",
        "status",
        "title",
      ];
      let optionalFields = [];

      return userAsAuthor() && documentFieldsCheckout(requiredFields, optionalFields);
    }


    function updateIssueByAuthor() {
      let allowedFields = [
        "title",
        "description",
        "assigned_to",
        "assigned_id",
        "last_edited",
        "priority",
        "status",
      ];
      return (userIsAuthor() && notResolved() && updateAllowedFields(allowedFields))
    }
     
    function updateIssueByAssigned() {
      let allowedFields = ["resolved", "last_edited", "status"];
      return (userIsAssigned() && updateAllowedFields(allowedFields));
    }

    // all documents
    match /{document=**} {
      allow read, write: if false
          
    }

    // issue collection
    match /issues/{issueId} {
      allow read: if true;
      allow update: if updateIssueByAuthor() || updateIssueByAssigned()
      allow create: if  createIssueByAuthor();
      allow delete: if false
    }

    
    // users collection
    match /users/{userId} {
      allow read: if isSignedIn()
      allow update: if false 
      allow create: if  isSignedIn() && createUserbyUser();
      allow delete: if false
    }
  }
}



